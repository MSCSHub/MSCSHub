{
  "version": 3,
  "sources": ["../../../../../node_modules/@angular/material/fesm2022/grid-list.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/bidi';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst _c3 = \".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size)}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size)}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size)}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size)}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\";\nclass TileCoordinator {\n  constructor() {\n    /** Index at which the search for the next gap will start. */\n    this.columnIndex = 0;\n    /** The current row index. */\n    this.rowIndex = 0;\n  }\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount() {\n    return this.rowIndex + 1;\n  }\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   * @param tiles Tiles to be positioned.\n   */\n  update(numColumns, tiles) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n  /** Calculates the row and col position of a tile. */\n  _trackTile(tile) {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n  /** Finds the next available space large enough to fit the tile. */\n  _findMatchingGap(tileCols) {\n    if (tileCols > this.tracker.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` + `grid with cols=\"${this.tracker.length}\".`);\n    }\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while (gapEndIndex - gapStartIndex < tileCols || gapEndIndex == 0);\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n  /** Move \"down\" to the next row. */\n  _nextRow() {\n    this.columnIndex = 0;\n    this.rowIndex++;\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  _findGapEndIndex(gapStartIndex) {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n  /** Update the tile tracker to account for the given tile in the given space. */\n  _markTilePosition(start, tile) {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nclass TilePosition {\n  constructor(row, col) {\n    this.row = row;\n    this.col = col;\n  }\n}\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\nclass MatGridTile {\n  constructor(_element, _gridList) {\n    this._element = _element;\n    this._gridList = _gridList;\n    this._rowspan = 1;\n    this._colspan = 1;\n  }\n  /** Amount of rows that the grid tile takes up. */\n  get rowspan() {\n    return this._rowspan;\n  }\n  set rowspan(value) {\n    this._rowspan = Math.round(coerceNumberProperty(value));\n  }\n  /** Amount of columns that the grid tile takes up. */\n  get colspan() {\n    return this._colspan;\n  }\n  set colspan(value) {\n    this._colspan = Math.round(coerceNumberProperty(value));\n  }\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property, value) {\n    this._element.nativeElement.style[property] = value;\n  }\n  static {\n    this.ɵfac = function MatGridTile_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatGridTile)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MAT_GRID_LIST, 8));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatGridTile,\n      selectors: [[\"mat-grid-tile\"]],\n      hostAttrs: [1, \"mat-grid-tile\"],\n      hostVars: 2,\n      hostBindings: function MatGridTile_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n        }\n      },\n      inputs: {\n        rowspan: \"rowspan\",\n        colspan: \"colspan\"\n      },\n      exportAs: [\"matGridTile\"],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c0,\n      decls: 2,\n      vars: 0,\n      consts: [[1, \"mat-grid-tile-content\"]],\n      template: function MatGridTile_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵprojection(1);\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size)}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size)}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size)}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size)}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTile, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile',\n      exportAs: 'matGridTile',\n      host: {\n        'class': 'mat-grid-tile',\n        // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n        // the DOM. This is needed for the grid-tile harness.\n        '[attr.rowspan]': 'rowspan',\n        '[attr.colspan]': 'colspan'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      standalone: true,\n      template: \"<div class=\\\"mat-grid-tile-content\\\">\\n  <ng-content></ng-content>\\n</div>\\n\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size)}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size)}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size)}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size)}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"]\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_GRID_LIST]\n    }]\n  }], {\n    rowspan: [{\n      type: Input\n    }],\n    colspan: [{\n      type: Input\n    }]\n  });\n})();\nclass MatGridTileText {\n  constructor(_element) {\n    this._element = _element;\n  }\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n  static {\n    this.ɵfac = function MatGridTileText_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatGridTileText)(i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatGridTileText,\n      selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]],\n      contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatLine, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._lines = _t);\n        }\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c2,\n      decls: 4,\n      vars: 0,\n      consts: [[1, \"mat-grid-list-text\"]],\n      template: function MatGridTileText_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c1);\n          i0.ɵɵprojection(0);\n          i0.ɵɵelementStart(1, \"div\", 0);\n          i0.ɵɵprojection(2, 1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵprojection(3, 2);\n        }\n      },\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileText, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      standalone: true,\n      template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\"\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }], {\n    _lines: [{\n      type: ContentChildren,\n      args: [MatLine, {\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridAvatarCssMatStyler {\n  static {\n    this.ɵfac = function MatGridAvatarCssMatStyler_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatGridAvatarCssMatStyler)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatGridAvatarCssMatStyler,\n      selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]],\n      hostAttrs: [1, \"mat-grid-avatar\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: '[mat-grid-avatar], [matGridAvatar]',\n      host: {\n        'class': 'mat-grid-avatar'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n  static {\n    this.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatGridTileHeaderCssMatStyler)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatGridTileHeaderCssMatStyler,\n      selectors: [[\"mat-grid-tile-header\"]],\n      hostAttrs: [1, \"mat-grid-tile-header\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-header',\n      host: {\n        'class': 'mat-grid-tile-header'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n  static {\n    this.ɵfac = function MatGridTileFooterCssMatStyler_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatGridTileFooterCssMatStyler)();\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatGridTileFooterCssMatStyler,\n      selectors: [[\"mat-grid-tile-footer\"]],\n      hostAttrs: [1, \"mat-grid-tile-footer\"],\n      standalone: true\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-grid-tile-footer',\n      host: {\n        'class': 'mat-grid-tile-footer'\n      },\n      standalone: true\n    }]\n  }], null, null);\n})();\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nclass TileStyler {\n  constructor() {\n    this._rows = 0;\n    this._rowspan = 0;\n  }\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize, tracker, cols, direction) {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent, gutterFraction) {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize, offset) {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize, span) {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile, rowIndex, colIndex) {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan() {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight) {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight() {\n    return null;\n  }\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nclass FixedTileStyler extends TileStyler {\n  constructor(fixedRowHeight) {\n    super();\n    this.fixedRowHeight = fixedRowHeight;\n  }\n  init(gutterSize, tracker, cols, direction) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n  setRowStyles(tile, rowIndex) {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n  getComputedHeight() {\n    return ['height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)];\n  }\n  reset(list) {\n    list._setListStyle(['height', null]);\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nclass RatioTileStyler extends TileStyler {\n  constructor(value) {\n    super();\n    this._parseRatio(value);\n  }\n  setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n  getComputedHeight() {\n    return ['paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)];\n  }\n  reset(list) {\n    list._setListStyle(['paddingBottom', null]);\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n  _parseRatio(value) {\n    const ratioParts = value.split(':');\n    if (ratioParts.length !== 2 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nclass FitTileStyler extends TileStyler {\n  setRowStyles(tile, rowIndex) {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n  reset(list) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n/** Wraps a CSS string in a calc function */\nfunction calc(exp) {\n  return `calc(${exp})`;\n}\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value) {\n  return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n  constructor(_element, _dir) {\n    this._element = _element;\n    this._dir = _dir;\n    /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n    this._gutter = '1px';\n  }\n  /** Amount of columns in the grid list. */\n  get cols() {\n    return this._cols;\n  }\n  set cols(value) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n  /** Size of the grid list's gutter in pixels. */\n  get gutterSize() {\n    return this._gutter;\n  }\n  set gutterSize(value) {\n    this._gutter = `${value == null ? '' : value}`;\n  }\n  /** Set internal representation of row height from the user-provided value. */\n  get rowHeight() {\n    return this._rowHeight;\n  }\n  set rowHeight(value) {\n    const newValue = `${value == null ? '' : value}`;\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n  /** Throw a friendly error if cols property is missing */\n  _checkCols() {\n    if (!this.cols && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` + `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n  /** Default to equal width:height if rowHeight property is missing */\n  _checkRowHeight() {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  _setTileStyler(rowHeight) {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n  /** Computes and applies the size and position for all children grid tiles. */\n  _layoutTiles() {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style) {\n    if (style) {\n      this._element.nativeElement.style[style[0]] = style[1];\n    }\n  }\n  static {\n    this.ɵfac = function MatGridList_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatGridList)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Directionality, 8));\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatGridList,\n      selectors: [[\"mat-grid-list\"]],\n      contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatGridTile, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._tiles = _t);\n        }\n      },\n      hostAttrs: [1, \"mat-grid-list\"],\n      hostVars: 1,\n      hostBindings: function MatGridList_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"cols\", ctx.cols);\n        }\n      },\n      inputs: {\n        cols: \"cols\",\n        gutterSize: \"gutterSize\",\n        rowHeight: \"rowHeight\"\n      },\n      exportAs: [\"matGridList\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MAT_GRID_LIST,\n        useExisting: MatGridList\n      }]), i0.ɵɵStandaloneFeature],\n      ngContentSelectors: _c0,\n      decls: 2,\n      vars: 0,\n      template: function MatGridList_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"div\");\n          i0.ɵɵprojection(1);\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [_c3],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-grid-list',\n      exportAs: 'matGridList',\n      host: {\n        'class': 'mat-grid-list',\n        // Ensures that the \"cols\" input value is reflected in the DOM. This is\n        // needed for the grid-list harness.\n        '[attr.cols]': 'cols'\n      },\n      providers: [{\n        provide: MAT_GRID_LIST,\n        useExisting: MatGridList\n      }],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      standalone: true,\n      template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n      styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;flex:auto;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}.mat-grid-tile-header{font-size:var(--mat-grid-list-tile-header-primary-text-size)}.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-header-secondary-text-size)}.mat-grid-tile-footer{font-size:var(--mat-grid-list-tile-footer-primary-text-size)}.mat-grid-tile-footer .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2){font-size:var(--mat-grid-list-tile-footer-secondary-text-size)}.mat-grid-tile-content{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}\"]\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i1.Directionality,\n    decorators: [{\n      type: Optional\n    }]\n  }], {\n    _tiles: [{\n      type: ContentChildren,\n      args: [MatGridTile, {\n        descendants: true\n      }]\n    }],\n    cols: [{\n      type: Input\n    }],\n    gutterSize: [{\n      type: Input\n    }],\n    rowHeight: [{\n      type: Input\n    }]\n  });\n})();\nclass MatGridListModule {\n  static {\n    this.ɵfac = function MatGridListModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatGridListModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatGridListModule,\n      imports: [MatLineModule, MatCommonModule, MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler],\n      exports: [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [MatLineModule, MatCommonModule, MatLineModule, MatCommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatGridListModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatLineModule, MatCommonModule, MatGridList, MatGridTile, MatGridTileText, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler],\n      exports: [MatGridList, MatGridTile, MatGridTileText, MatLineModule, MatCommonModule, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MatGridAvatarCssMatStyler]\n    }]\n  }], null, null);\n})();\n\n// Privately exported for the grid-list harness.\nconst ɵTileCoordinator = TileCoordinator;\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, ɵTileCoordinator };\n"],
  "mappings": "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",
  "names": []
}
