{
  "version": 3,
  "sources": ["../../../../../node_modules/@angular/fire/fesm2022/angular-fire-app.mjs"],
  "sourcesContent": ["import { getApps as getApps$1, getApp as getApp$1, registerVersion as registerVersion$1, deleteApp as deleteApp$1, initializeApp as initializeApp$1, initializeServerApp as initializeServerApp$1, onLog as onLog$1, setLogLevel as setLogLevel$1 } from 'firebase/app';\nexport * from 'firebase/app';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, PLATFORM_ID, VERSION as VERSION$1, NgModule, Inject, makeEnvironmentProviders, NgZone, Injector } from '@angular/core';\nimport { VERSION, ɵAngularFireSchedulers as _AngularFireSchedulers, ɵzoneWrap as _zoneWrap } from '@angular/fire';\nclass FirebaseApp {\n  constructor(app) {\n    return app;\n  }\n}\nclass FirebaseApps {\n  constructor() {\n    return getApps$1();\n  }\n}\nconst firebaseApp$ = timer(0, 300).pipe(concatMap(() => from(getApps$1())), distinct());\nfunction defaultFirebaseAppFactory(provided) {\n  // Use the provided app, if there is only one, otherwise fetch the default app\n  if (provided && provided.length === 1) {\n    return provided[0];\n  }\n  return new FirebaseApp(getApp$1());\n}\n// With FIREBASE_APPS I wanted to capture the default app instance, if it is initialized by\n// the reserved URL; ɵPROVIDED_FIREBASE_APPS is not for public consumption and serves to ensure that all\n// provideFirebaseApp(...) calls are satisfied before FirebaseApp$ or FirebaseApp is resolved\nconst PROVIDED_FIREBASE_APPS = new InjectionToken('angularfire2._apps');\n// Injecting FirebaseApp will now only inject the default Firebase App\n// this allows allows beginners to import /__/firebase/init.js to auto initialize Firebase App\n// from the reserved URL.\nconst DEFAULT_FIREBASE_APP_PROVIDER = {\n  provide: FirebaseApp,\n  useFactory: defaultFirebaseAppFactory,\n  deps: [[new Optional(), PROVIDED_FIREBASE_APPS]]\n};\nconst FIREBASE_APPS_PROVIDER = {\n  provide: FirebaseApps,\n  deps: [[new Optional(), PROVIDED_FIREBASE_APPS]]\n};\nfunction firebaseAppFactory(fn) {\n  return (zone, injector) => {\n    const platformId = injector.get(PLATFORM_ID);\n    registerVersion$1('angularfire', VERSION.full, 'core');\n    registerVersion$1('angularfire', VERSION.full, 'app');\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    registerVersion$1('angular', VERSION$1.full, platformId.toString());\n    const app = zone.runOutsideAngular(() => fn(injector));\n    return new FirebaseApp(app);\n  };\n}\nclass FirebaseAppModule {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  constructor(platformId) {\n    registerVersion$1('angularfire', VERSION.full, 'core');\n    registerVersion$1('angularfire', VERSION.full, 'app');\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    registerVersion$1('angular', VERSION$1.full, platformId.toString());\n  }\n  static ɵfac = function FirebaseAppModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FirebaseAppModule)(i0.ɵɵinject(PLATFORM_ID));\n  };\n  static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FirebaseAppModule\n  });\n  static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [DEFAULT_FIREBASE_APP_PROVIDER, FIREBASE_APPS_PROVIDER]\n  });\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FirebaseAppModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_FIREBASE_APP_PROVIDER, FIREBASE_APPS_PROVIDER]\n    }]\n  }], () => [{\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }], null);\n})();\n// Calling initializeApp({ ... }, 'name') multiple times will add more FirebaseApps into the FIREBASE_APPS\n// injection scope. This allows developers to more easily work with multiple Firebase Applications. Downside\n// is that DI for app name and options doesn't really make sense anymore.\nfunction provideFirebaseApp(fn, ...deps) {\n  return makeEnvironmentProviders([DEFAULT_FIREBASE_APP_PROVIDER, FIREBASE_APPS_PROVIDER, {\n    provide: PROVIDED_FIREBASE_APPS,\n    useFactory: firebaseAppFactory(fn),\n    multi: true,\n    deps: [NgZone, Injector, _AngularFireSchedulers, ...deps]\n  }]);\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst deleteApp = _zoneWrap(deleteApp$1, true);\nconst getApp = _zoneWrap(getApp$1, true);\nconst getApps = _zoneWrap(getApps$1, true);\nconst initializeApp = _zoneWrap(initializeApp$1, true);\nconst initializeServerApp = _zoneWrap(initializeServerApp$1, true);\nconst onLog = _zoneWrap(onLog$1, true);\nconst registerVersion = _zoneWrap(registerVersion$1, true);\nconst setLogLevel = _zoneWrap(setLogLevel$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FirebaseApp, FirebaseAppModule, FirebaseApps, deleteApp, firebaseApp$, getApp, getApps, initializeApp, initializeServerApp, onLog, provideFirebaseApp, registerVersion, setLogLevel };\n"],
  "mappings": "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",
  "names": ["VERSION", "deleteApp", "getApp", "getApps", "initializeApp", "initializeServerApp", "onLog", "registerVersion", "setLogLevel"]
}
